package com.ai.generated;

import java.util.*;

/**
 * 
 * @author Vihaan
 * 
 * Autogenerated.
 * Intraday strategies.
 * 
 *  Breakout Traders: ORB, Pivot Point, VWAP.
 *  Pullback Traders: Fibonacci, ATR-Based Entry.
 *  Reversal Traders: Pivot Point, VWAP.
 *
 */

public class IntradayTradingStrategies {

    public static void main(String[] args) {
        // Sample minute-level OHLC data
        List<OHLC> ohlcData = Arrays.asList(
            new OHLC("09:15", 23000, 23050, 22980, 23020, 10000),
            new OHLC("09:16", 23020, 23040, 23000, 23030, 12000),
            new OHLC("09:17", 23030, 23060, 23020, 23050, 11000)
            // Add more minute-level data as needed
        );

        // Calculate various trading strategies
        double pivotPoint = calculatePivotPoint(ohlcData);
        double vwap = calculateVWAP(ohlcData);
        double fibonacciRetracement = calculateFibonacciRetracement(ohlcData);
        double openingRangeBreakout = calculateORB(ohlcData);
        double atrEntry = calculateATRBasedEntry(ohlcData);

        // Display results
        System.out.printf("Pivot Point Entry: %.2f\n", pivotPoint);
        System.out.printf("VWAP Entry: %.2f\n", vwap);
        System.out.printf("Fibonacci Retracement Entry: %.2f\n", fibonacciRetracement);
        System.out.printf("Opening Range Breakout Entry: %.2f\n", openingRangeBreakout);
        System.out.printf("ATR-Based Entry: %.2f\n", atrEntry);
    }

    /**
     * Calculates the Pivot Point based on previous day's OHLC values.
     */
    public static double calculatePivotPoint(List<OHLC> ohlcData) {
        OHLC firstCandle = ohlcData.get(0);
        return (firstCandle.high + firstCandle.low + firstCandle.close) / 3;
    }

    /**
     * Calculates VWAP (Volume Weighted Average Price) for intraday trades.
     */
    public static double calculateVWAP(List<OHLC> ohlcData) {
        double totalPriceVolume = 0, totalVolume = 0;
        for (OHLC ohlc : ohlcData) {
            totalPriceVolume += (ohlc.close * ohlc.volume);
            totalVolume += ohlc.volume;
        }
        return totalPriceVolume / totalVolume;
    }

    /**
     * Calculates Fibonacci Retracement Level based on highest and lowest prices.
     */
    public static double calculateFibonacciRetracement(List<OHLC> ohlcData) {
        double high = ohlcData.stream().mapToDouble(o -> o.high).max().orElse(0);
        double low = ohlcData.stream().mapToDouble(o -> o.low).min().orElse(0);
        return high - ((high - low) * 0.618); // 61.8% retracement level
    }

    /**
     * Calculates Opening Range Breakout (ORB) based on the first hour's range.
     */
    public static double calculateORB(List<OHLC> ohlcData) {
        OHLC firstCandle = ohlcData.get(0);
        double range = firstCandle.high - firstCandle.low;
        return firstCandle.open + range;
    }

    /**
     * Calculates ATR-Based Entry using the Average True Range formula.
     */
    public static double calculateATRBasedEntry(List<OHLC> ohlcData) {
        double totalATR = 0;
        for (int i = 1; i < ohlcData.size(); i++) {
            double tr = Math.max(ohlcData.get(i).high - ohlcData.get(i).low,
                    Math.max(Math.abs(ohlcData.get(i).high - ohlcData.get(i - 1).close),
                            Math.abs(ohlcData.get(i).low - ohlcData.get(i - 1).close)));
            totalATR += tr;
        }
        return ohlcData.get(0).close + (totalATR / ohlcData.size()) * 1.5; // ATR-based entry
    }
}

